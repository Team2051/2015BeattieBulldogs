// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2051.BeattieFinalBot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSystemRightTalon12;
    public static SpeedController driveSystemLeftTalon34;
    public static RobotDrive driveSystemRobotDrive;
    public static AnalogChannel collectorArmArmPosition;
    public static SpeedController collectorArmBallCollectorTalon7;
    public static SpeedController collectorArmArmAngleTalon56;
    public static DigitalInput collectorArmArmHighLimit;
    public static DigitalInput collectorArmArmLowLimit;
    public static DoubleSolenoid collectorArmCollectorPosition;
    public static SpeedController shootingMechanismShooterReloadTalon8;
    public static DigitalInput shootingMechanismShooterForward;
    public static DigitalInput shootingMechanismShooterCharged;
    public static DoubleSolenoid shootingMechanismShooterTrigger;
    public static Relay lightRingSpike2;
    public static Compressor compressorSystemCompressor1;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemRightTalon12 = new Talon(1, 1);
	LiveWindow.addActuator("DriveSystem", "Right Talon 1 2", (Talon) driveSystemRightTalon12);
        
        driveSystemLeftTalon34 = new Talon(1, 2);
	LiveWindow.addActuator("DriveSystem", "Left Talon 3 4", (Talon) driveSystemLeftTalon34);
        
        driveSystemRobotDrive = new RobotDrive(driveSystemRightTalon12, driveSystemLeftTalon34);
	
        driveSystemRobotDrive.setSafetyEnabled(true);
        driveSystemRobotDrive.setExpiration(0.1);
        driveSystemRobotDrive.setSensitivity(0.5);
        driveSystemRobotDrive.setMaxOutput(1.0);
        
        collectorArmArmPosition = new AnalogChannel(1, 1);
	LiveWindow.addSensor("CollectorArm", "Arm Position", collectorArmArmPosition);
        
        collectorArmBallCollectorTalon7 = new Talon(1, 4);
	LiveWindow.addActuator("CollectorArm", "Ball Collector Talon 7", (Talon) collectorArmBallCollectorTalon7);
        
        collectorArmArmAngleTalon56 = new Talon(1, 3);
	LiveWindow.addActuator("CollectorArm", "Arm Angle Talon 56", (Talon) collectorArmArmAngleTalon56);
        
        collectorArmArmHighLimit = new DigitalInput(1, 4);
	LiveWindow.addSensor("CollectorArm", "Arm High Limit", collectorArmArmHighLimit);
        
        collectorArmArmLowLimit = new DigitalInput(1, 5);
	LiveWindow.addSensor("CollectorArm", "Arm Low Limit", collectorArmArmLowLimit);
        
        collectorArmCollectorPosition = new DoubleSolenoid(1, 1, 2);      
	
        
        shootingMechanismShooterReloadTalon8 = new Talon(1, 5);
	LiveWindow.addActuator("ShootingMechanism", "Shooter Reload Talon 8", (Talon) shootingMechanismShooterReloadTalon8);
        
        shootingMechanismShooterForward = new DigitalInput(1, 2);
	LiveWindow.addSensor("ShootingMechanism", "Shooter Forward", shootingMechanismShooterForward);
        
        shootingMechanismShooterCharged = new DigitalInput(1, 3);
	LiveWindow.addSensor("ShootingMechanism", "Shooter Charged", shootingMechanismShooterCharged);
        
        shootingMechanismShooterTrigger = new DoubleSolenoid(1, 3, 4);      
	
        
        lightRingSpike2 = new Relay(1, 2);
	LiveWindow.addActuator("LightRing", "Spike 2", lightRingSpike2);
        
        compressorSystemCompressor1 = new Compressor(1, 1, 1, 1);
	
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
