// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2051.aerialassist.subsystems;
import org.usfirst.frc2051.aerialassist.RobotMap;
import org.usfirst.frc2051.aerialassist.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc2051.aerialassist.Robot;
/**
 *
 */
public class CollectorArm extends Subsystem 
{
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    AnalogChannel armPosition = RobotMap.collectorArmArmPosition;
    SpeedController ballCollectorTalon7 = RobotMap.collectorArmBallCollectorTalon7;
    SpeedController armAngleTalon56 = RobotMap.collectorArmArmAngleTalon56;
    DigitalInput armHighLimit = RobotMap.collectorArmArmHighLimit;
    DigitalInput armLowLimit = RobotMap.collectorArmArmLowLimit;
    DoubleSolenoid collectorPosition = RobotMap.collectorArmCollectorPosition;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // How fast to move the arm
    private static final double armSpeed = 0.5;
    private static final double ballSpeed = .75;    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() 
    {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void armStop()
    {
        armAngleTalon56.set(0);
    }
   //Increase arm angle towards 90 degrees _|
    public void armUp()
    {
        armAngleTalon56.set(armSpeed);
    }
    
    //Decrease arm angle towards 0 degrees =
    public void armDown()
    {
        armAngleTalon56.set(-armSpeed);
    }
    
    //Detect current angle of arm
    public double armDetectAngle()
    {
        return armPosition.getVoltage();
        
    }
    
    //Is arm as high as possible?
    public boolean armHighLimit()
    {
        return !armHighLimit.get();
    }
    
    //Is arm as low as possible?
    public boolean armLowLimit()
    {
        return !armLowLimit.get();
    }
    
    //Spin ball collector wheel
    public void ballCollect()
    {
        ballCollectorTalon7.set(ballSpeed);
    }
    
    //Stop ball collector wheel
    public void ballStop()
    {
        ballCollectorTalon7.set(0);
    }
    //Push collector arm up
    public void collectorUp()
    {
        collectorPosition.set(DoubleSolenoid.Value.kForward);
    }
    
    //Push collector arm down
    public void collectorDown()
    {
        collectorPosition.set(DoubleSolenoid.Value.kReverse);
    }
}