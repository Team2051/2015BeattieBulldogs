// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2051.aerialassist;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

//import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static SpeedController driveSystemRightTalon01;
	public static SpeedController driveSystemLeftTalon23;
	public static RobotDrive driveSystemRobotDrive;
	public static AnalogInput collectorArmArmPosition;
	public static SpeedController collectorArmBallCollectorTalon6;
	public static SpeedController collectorArmArmAngleTalon45;
	public static DigitalInput collectorArmArmHighLimit;
	public static DigitalInput collectorArmArmLowLimit;
	public static DoubleSolenoid collectorArmCollectorPosition;
	public static SpeedController shootingMechanismShooterReloadTalon7;
	public static DigitalInput shootingMechanismShooterForward;
	public static DigitalInput shootingMechanismShooterCharged;
	public static DoubleSolenoid shootingMechanismShooterTrigger;
	public static Relay lightRingSpike2;
	public static Compressor compressorSystemCompressor1;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveSystemRightTalon01 = new Talon(0);
		LiveWindow.addActuator("DriveSystem", "Right Talon 0 1",
				(Talon) driveSystemRightTalon01);

		driveSystemLeftTalon23 = new Talon(1);
		LiveWindow.addActuator("DriveSystem", "Left Talon 2 3",
				(Talon) driveSystemLeftTalon23);

		driveSystemRobotDrive = new RobotDrive(driveSystemRightTalon01,
				driveSystemLeftTalon23);

		driveSystemRobotDrive.setSafetyEnabled(true);
		driveSystemRobotDrive.setExpiration(0.1);
		driveSystemRobotDrive.setSensitivity(0.5);
		driveSystemRobotDrive.setMaxOutput(1.0);
		// In a two-motor drive, both are referred to as Rear motors for
		// inversion
		driveSystemRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft,
				true);
		driveSystemRobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight,
				true);

		collectorArmArmPosition = new AnalogInput(0);
		LiveWindow.addSensor("CollectorArm", "Arm Position",
				collectorArmArmPosition);

		collectorArmBallCollectorTalon6 = new Talon(3);
		LiveWindow.addActuator("CollectorArm", "Ball Collector Talon 6",
				(Talon) collectorArmBallCollectorTalon6);

		collectorArmArmAngleTalon45 = new Talon(2);
		LiveWindow.addActuator("CollectorArm", "Arm Angle Talon 45",
				(Talon) collectorArmArmAngleTalon45);

		collectorArmArmHighLimit = new DigitalInput(3);
		LiveWindow.addSensor("CollectorArm", "Arm High Limit",
				collectorArmArmHighLimit);

		collectorArmArmLowLimit = new DigitalInput(4);
		LiveWindow.addSensor("CollectorArm", "Arm Low Limit",
				collectorArmArmLowLimit);

		collectorArmCollectorPosition = new DoubleSolenoid(0, 1);

		shootingMechanismShooterReloadTalon7 = new Talon(4);
		LiveWindow.addActuator("ShootingMechanism", "Shooter Reload Talon 8",
				(Talon) shootingMechanismShooterReloadTalon7);

		shootingMechanismShooterForward = new DigitalInput(2);
		LiveWindow.addSensor("ShootingMechanism", "Shooter Forward",
				shootingMechanismShooterForward);

		shootingMechanismShooterCharged = new DigitalInput(1);
		LiveWindow.addSensor("ShootingMechanism", "Shooter Charged",
				shootingMechanismShooterCharged);

		shootingMechanismShooterTrigger = new DoubleSolenoid(2, 3);

		lightRingSpike2 = new Relay(1, Relay.Direction.kForward);
		LiveWindow.addActuator("LightRing", "Spike 2", lightRingSpike2);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}
}
