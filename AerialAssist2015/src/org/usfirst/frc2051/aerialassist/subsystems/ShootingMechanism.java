// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc2051.aerialassist.subsystems;

import org.usfirst.frc2051.aerialassist.RobotMap;
import org.usfirst.frc2051.aerialassist.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class ShootingMechanism extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	SpeedController shooterReloadTalon8 = RobotMap.shootingMechanismShooterReloadTalon7;
	DigitalInput shooterForward = RobotMap.shootingMechanismShooterForward;
	DigitalInput shooterCharged = RobotMap.shootingMechanismShooterCharged;
	DoubleSolenoid shooterTrigger = RobotMap.shootingMechanismShooterTrigger;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.
	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	// Pulls launcher back towards compressor
	public void reloadBack() {
		shooterReloadTalon8.set(1);
	}

	// Pushes launcher forward, towards ball
	public void reloadForward() {
		shooterReloadTalon8.set(-1);
	}

	// Stops launcher movement
	public void reloadStop() {
		shooterReloadTalon8.set(0);
	}

	// Fire ball thingymabobber
	public void fire() {
		shooterTrigger.set(DoubleSolenoid.Value.kReverse);
	}

	// unfire ball
	public void unfire() {
		shooterTrigger.set(DoubleSolenoid.Value.kForward);
	}

	// get status of limit switch
	public boolean shooterForward() {
		return !shooterForward.get();
	}

	// get status of limit switch
	public boolean shooterCharged() {
		return !shooterCharged.get();
	}
}
